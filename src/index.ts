import { Bot, GrammyError, HttpError, session } from "grammy";
import { CONFIG } from "./config";
import { MyContext, SessionData } from "./types";
import { MENU, addUser, deleteUserByName } from "./model";
import { commands } from "./commands";
import { isValidTelegramAccount } from "utils";

if (!CONFIG.TELEGRAM.TOKEN) {
  throw new Error(
    "No token. Please create .env file in the root directory and set TELEGRAM_TOKEN variable there"
  );
}
const bot = new Bot<MyContext>(CONFIG.TELEGRAM.TOKEN);
bot.use(session({ initial: (): SessionData => ({ expectingAccount: false }) }));

bot.api.setMyCommands(MENU);

bot.use(commands);

// –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫—É–¥–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å
bot.on("::mention", async (ctx) => {
  const text = ctx.message?.text;
  const userId = ctx.update.message?.from.id;

  let message = `*${text}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫`;
  if (userId !== ctx.session.expectingAccount) {
    return;
  }

  if (text && isValidTelegramAccount(text)) {
    const result = await addUser({ name: text, chatId: ctx.chat.id });

    if (!result) {
      message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º ${text} —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–≥—Ä—É —Ä–∞–Ω–µ–µ. –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è`;
    }
  } else {
    message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.*";
  }
  ctx.session.expectingAccount = false;
  ctx.reply(message);
});

bot.on("callback_query:data", async (ctx) => {
  const [action, ...rest] = ctx.update.callback_query.data.split(" ");
  const payload = rest.join(" ");
  switch (action) {
    case "removeUser":
      try {
        await deleteUserByName(payload);
        ctx.reply(`${payload} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚ò†Ô∏è`, {
          parse_mode: "Markdown",
        });
      } catch {
        ctx.reply("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞. üò±");
      }
      break;
    default:
      ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ù–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥—É üòù");
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
  } else {
    console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
  }
});
bot.start();
