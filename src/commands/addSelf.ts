import { Composer } from "grammy";
import { MyContext } from "../types";
import { addUser } from "model";

const addSelfComposer = new Composer<MyContext>();

addSelfComposer.command("add_self", async (ctx) => {
  if (!ctx.message) {
    ctx.reply("–ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. ‚ò†Ô∏è");
    return;
  }
  console.table(ctx.chat);
  console.table(ctx.message.message_thread_id);

  const username = ctx.message?.from.username
    ? `@${ctx.message.from.username}`
    : `[${ctx.message.from.first_name}](tg://user?id=${ctx.message.from.id})`;
  const result = await addUser({
    id: ctx.message.from.id,
    name: username,
    chatId: ctx.chat.id,
  });
  if (!result) {
    ctx.reply(`–í—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ. –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è üôÖ‚Äç‚ôÇÔ∏è`, {
      message_thread_id: ctx.message.message_thread_id,
    });
  } else {
    ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, ${ctx.message.from.first_name}! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. üëç`, {
      message_thread_id: ctx.message.message_thread_id,
    });
  }
});

export { addSelfComposer };
