import { Composer, GrammyError } from "grammy";
import { MyContext } from "../types";
import { getUsersOfChat, logError, updateUserById } from "model";
import { random, sortBy } from "es-toolkit";
import { extractName } from "utils/extractName";

const nextComposer = new Composer<MyContext>();

const MIN_PARTICIPANTS_COUNT = 3;

nextComposer.command("next", async (ctx) => {
  try {
    const chatId = ctx.chat.id;
    const users = sortBy(getUsersOfChat(chatId), [
      ({ lastPicked }) => lastPicked || 0,
    ]).slice(0, MIN_PARTICIPANTS_COUNT);

    if (users.length < MIN_PARTICIPANTS_COUNT) {
      ctx.reply(
        `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ! –ú–∏–Ω–∏–º—É–º - ${MIN_PARTICIPANTS_COUNT} ü§ï`,
        {
          message_thread_id: ctx.message?.message_thread_id,
        }
      );
      return;
    }
    const selectedIndex = random(users.length - 1);
    const selectedUser = users.at(selectedIndex);

    if (!selectedUser) {
      ctx.reply("–ö–∞–∫–∞—è-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ü§ï", {
        message_thread_id: ctx.message?.message_thread_id,
      });
      return;
    }
    await ctx.reply(
      `–î–∞–≤–Ω–µ–Ω—å–∫–æ —Å–∏–¥—è—Ç —Ç–∏—Ö–æ ${users
        .map(({ name }) => extractName(name))
        .join(", ")}. –¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫... ‚è≥\n–°–ª–µ–¥—É—é—â–∏–º –≤–µ–¥—É—â–∏–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è ${
        selectedUser.name
      } ü§¥`,
      {
        message_thread_id: ctx.message?.message_thread_id,
      }
    );
    try {
      console.log("before");
      await updateUserById(selectedUser.id, ctx.chat.id, Date.now());
      console.log("after");
    } catch {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", {
        message_thread_id: ctx.message?.message_thread_id,
      });
    }
    /*setTimeout(async () => {
      try {
        await ctx.reply(
          `–°–ª–µ–¥—É—é—â–∏–º –≤–µ–¥—É—â–∏–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è ${selectedUser.name} ü§¥`,
          {
            message_thread_id: ctx.message?.message_thread_id,
          }
        );
      } catch (error) {
        logError(
          JSON.stringify(error as GrammyError),
          "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–¥—É—â–µ–≥–æ"
        );
      }
    }, 2000);*/
  } catch (error) {
    logError(
      JSON.stringify(error as GrammyError),
      "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–µ–¥—É—â–µ–≥–æ"
    );
  }
});

export { nextComposer };
